---
import Layout from "../layouts/Layout.astro";
import { AstroSEO } from "astro-seo-plugin";
import { fetchVibePageData } from "../api.js";

let vibeData = null;
let error = null;

try {
  vibeData = await fetchVibePageData();
} catch (err) {
  console.error("Failed to load vibe data:", err);
  error = "Failed to load content";
}

if (!vibeData) {
  vibeData = {
    vibeImages: [],
    wildlifeImages: []
  };
}

// Prepare optimized image sets with proper fallbacks
const vibeImages = vibeData.vibeImages?.map((item, index) => {
  const image = item.image;
  return {
    id: `vibe-${index}`,
    src: image.card || image.url,
    placeholder: image.placeholder || image.url,
    large: image.large || image.url,
    alt: item.altText || `Experience the Limban vibe ${index + 1}`,
    width: image.width || 600,
    height: image.height || 450
  };
}) || [];

const wildlifeImages = vibeData.wildlifeImages?.map((item, index) => {
  const image = item.image;
  return {
    id: `wildlife-${index}`,
    src: image.card || image.url,
    placeholder: image.placeholder || image.url,
    large: image.large || image.url,
    alt: item.alt || `Tadoba wildlife encounter ${index + 1}`,
    width: image.width || 600,
    height: image.height || 450
  };
}) || [];

// Helper function to capitalize first letter of each word
function capitalizeWords(str) {
  return str.replace(/\w\S*/g, (txt) => 
    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
  );
}
---

<Layout title="The Limban Vibe - Feel What Calls You Wild">
  <AstroSEO
    title="The Limban Vibe | Feel What Calls You Wild - Tadoba Safari Experience"
    description="Immerse yourself in the Limban experience. Feel the luxury, taste the wild, live the moment. This is what calls you to Tadoba."
    canonical="https://limban.com/vibe"
    openGraph={{
      title: "The Limban Vibe - Feel What Calls You Wild",
      description: "Experience luxury safari living at its finest in Tadoba National Park. Feel the vibe that makes Limban unforgettable.",
      image: vibeImages[0]?.src || "/limban-vibe-hero.webp",
      type: "website",
      url: "https://limban.com/vibe",
    }}
  />

  <div class="bg-gray-950 text-gray-100 selection:bg-amber-400/20">
    
    <!-- Hero Section: Immediate Emotional Hook -->
    <section class="relative min-h-screen overflow-hidden">
      <!-- Dynamic Background Mosaic -->
      <div class="absolute inset-0 grid grid-cols-4 grid-rows-3 gap-1">
        {vibeImages.slice(0, 12).map((image, index) => (
          <div 
            key={image.id}
            class="relative overflow-hidden opacity-30 hover:opacity-60 transition-opacity duration-1000"
            style={`animation-delay: ${index * 0.2}s`}
          >
            <img
              src={image.placeholder}
              data-src={image.src}
              alt={image.alt}
              class="w-full h-full object-cover scale-110 lazy-image"
              loading="lazy"
            />
          </div>
        ))}
      </div>

      <!-- Gradient Overlay -->
      <div class="absolute inset-0 bg-gradient-to-br from-black/70 via-black/40 to-black/70"></div>

      <!-- Hero Content -->
      <div class="relative z-20 min-h-screen flex items-center justify-center text-center px-6">
        <div class="max-w-6xl space-y-12">
          <!-- Main Headline -->
          <div class="space-y-6">
            <h1 class="font-serif text-6xl md:text-8xl lg:text-9xl text-white leading-none tracking-tight">
              Feel
              <span class="block text-amber-400 italic">The Vibe</span>
            </h1>
            <p class="text-2xl md:text-3xl text-gray-200 font-light leading-relaxed max-w-4xl mx-auto">
              This is what calls you wild. This is what makes you stay.
              <span class="block mt-4 text-amber-400 italic">This is Limban.</span>
            </p>
          </div>

          <!-- Scroll Indicator -->
          <div class="pt-16">
            <div class="animate-bounce cursor-pointer" id="scroll-indicator">
              <svg class="w-8 h-8 mx-auto text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
              </svg>
            </div>
            <p class="text-sm text-gray-400 mt-2">Scroll to feel the magic</p>
          </div>
        </div>
      </div>
    </section>

    <!-- Breadcrumb -->
    <nav class="py-6 border-b border-gray-800/50">
      <div class="max-w-7xl mx-auto px-6">
        <div class="flex items-center justify-center space-x-2 text-sm text-gray-400">
          <a href="/" class="hover:text-amber-400 transition-colors duration-300">Home</a>
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
          </svg>
          <span class="text-amber-400 font-medium">The Vibe</span>
        </div>
      </div>
    </nav>

    <!-- Resort Vibe Section - Original Masonry -->
    <section class="py-32 bg-gray-900">
      <div class="max-w-7xl mx-auto px-6">
        
        <!-- Section Header -->
        <div class="text-center mb-20">
          <div class="inline-block px-6 py-2 bg-amber-400/10 border border-amber-400/30 rounded-full mb-8">
            <span class="text-amber-400 text-sm font-medium tracking-widest uppercase">Resort Experience</span>
          </div>
          <h2 class="font-serif italic text-5xl md:text-7xl text-white mb-8">
            Live the Luxury.
            <span class="block text-amber-400">Feel the Soul.</span>
          </h2>
          <p class="text-xl text-gray-300 font-light leading-relaxed max-w-4xl mx-auto">
            Every corner whispers stories. Every moment breathes life. 
            This is how luxury feels when it's crafted with soul.
          </p>
        </div>

        <!-- Advanced Masonry Grid with Slower Hover Effects -->
        <div class="columns-1 md:columns-2 lg:columns-3 xl:columns-4 gap-6 space-y-6">
          {vibeImages.map((image, index) => (
            <div 
              key={image.id}
              class="break-inside-avoid mb-6 group cursor-pointer"
              data-vibe-index={index}
            >
              <div class="relative overflow-hidden rounded-2xl bg-gray-800 hover:shadow-2xl hover:shadow-black/50 transition-all duration-1000 hover:scale-[1.01]">
                <!-- LQIP Background -->
                <div class="absolute inset-0">
                  <img
                    src={image.placeholder}
                    alt={image.alt}
                    class="w-full h-full object-cover blur-sm scale-110"
                  />
                </div>
                
                <!-- Main Image -->
                <img
                  src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1' height='1'%3E%3C/svg%3E"
                  data-src={image.src}
                  alt={image.alt}
                  class="relative w-full h-auto object-cover lazy-image opacity-0 transition-opacity duration-700"
                  style={`aspect-ratio: ${image.width}/${image.height}`}
                  loading="lazy"
                />
                
                <!-- Slower, More Elegant Hover Overlay -->
                <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-1000"></div>
                
                <!-- Refined Alt Text Display -->
                <div class="absolute bottom-0 left-0 right-0 p-6 transform translate-y-full group-hover:translate-y-0 transition-transform duration-1000">
                  <p class="text-white text-base font-serif italic leading-relaxed text-center">
                    {capitalizeWords(image.alt)}
                  </p>
                </div>
                
                <!-- View Icon -->
                <div class="absolute top-4 right-4 w-12 h-12 bg-black/50 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-500 hover:bg-amber-400/20 cursor-pointer">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
          ))}
        </div>
        
      </div>
    </section>

    <!-- Transition Section -->
    <section class="py-20 bg-gradient-to-b from-gray-900 to-green-950/30">
      <div class="max-w-4xl mx-auto text-center px-6">
        <h3 class="font-serif italic text-4xl md:text-5xl text-white mb-6">
          And then...
          <span class="block text-amber-400">The Wild Calls</span>
        </h3>
        <p class="text-xl text-gray-300 font-light leading-relaxed">
          Beyond the luxury, beyond the comfort, lies the reason you came here.
          The untamed. The magnificent. The wild heart of Tadoba.
        </p>
      </div>
    </section>

    <!-- Wildlife Gallery Section - Original Grid -->
    <section class="py-32 bg-gray-950">
      <div class="max-w-7xl mx-auto px-6">
        
        <!-- Section Header -->
        <div class="text-center mb-20">
          <div class="inline-block px-6 py-2 bg-green-400/10 border border-green-400/30 rounded-full mb-8">
            <span class="text-green-400 text-sm font-medium tracking-widest uppercase">Wild Encounters</span>
          </div>
          <h2 class="font-serif italic text-5xl md:text-7xl text-white mb-8">
            Meet Your
            <span class="block text-green-400">Wild Neighbours</span>
          </h2>
          <p class="text-xl text-gray-300 font-light leading-relaxed max-w-4xl mx-auto">
            In Tadoba, you're not just a visitor—you're a guest in their ancient kingdom.
            These are the moments that change you forever.
          </p>
        </div>

        <!-- Wildlife Grid with Slower Hover Effects -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {wildlifeImages.map((image, index) => (
            <div 
              key={image.id}
              class="group cursor-pointer"
              data-wildlife-index={index}
            >
              <div class="relative aspect-[4/3] overflow-hidden rounded-2xl bg-gray-800 hover:shadow-2xl hover:shadow-green-500/10 transition-all duration-1000">
                <!-- LQIP -->
                <div class="absolute inset-0">
                  <img
                    src={image.placeholder}
                    alt=""
                    class="w-full h-full object-cover blur-sm scale-110"
                  />
                </div>
                
                <!-- Main Image -->
                <img
                  src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1' height='1'%3E%3C/svg%3E"
                  data-src={image.src}
                  alt={image.alt}
                  class="relative w-full h-full object-cover lazy-image opacity-0 transition-all duration-700 group-hover:scale-105"
                  loading="lazy"
                />
                
                <!-- Slower, More Elegant Hover Overlay -->
                <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-1000"></div>
                
                <!-- Refined Alt Text Display -->
                <div class="absolute bottom-0 left-0 right-0 p-6 transform translate-y-full group-hover:translate-y-0 transition-transform duration-1000">
                  <p class="text-white text-base font-serif italic leading-relaxed text-center">
                    {capitalizeWords(image.alt)}
                  </p>
                </div>
                
                <!-- View Icon -->
                <div class="absolute top-4 right-4 w-12 h-12 bg-black/50 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-500 hover:bg-green-400/20 cursor-pointer">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                </div>
              </div>
            </div>
          ))}
        </div>

      </div>
    </section>

    <!-- Call to Action -->
    <section class="py-32 bg-gray-900">
      <div class="max-w-5xl mx-auto px-6 text-center">
        <h2 class="font-serif italic text-5xl md:text-7xl text-white mb-8">
          Ready to Experience
          <span class="block text-amber-400">The Limban Vibe?</span>
        </h2>
        <p class="text-2xl text-gray-300 font-light leading-relaxed mb-12 max-w-4xl mx-auto">
          Every image tells a story. Your story begins the moment you arrive.
          The wild is calling. Limban is waiting.
        </p>
        <div class="flex flex-col sm:flex-row gap-6 justify-center">
          <a
            href="/rooms"
            class="inline-flex items-center px-10 py-5 bg-amber-400 text-gray-900 font-semibold rounded-full hover:bg-amber-300 hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-2xl text-lg"
          >
            Book Your Experience
            <svg class="w-6 h-6 ml-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
            </svg>
          </a>
          <a
            href="/contact"
            class="inline-flex items-center px-10 py-5 border-2 border-amber-400 text-amber-400 font-semibold rounded-full hover:bg-amber-400/10 hover:scale-105 transition-all duration-300 text-lg"
          >
            Plan Your Safari
            <svg class="w-6 h-6 ml-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
          </a>
        </div>
      </div>
    </section>

<!-- Enhanced Gallery Modal with Loading States -->
<div id="gallery-modal" class="fixed inset-0 z-50 bg-black/95 backdrop-blur-xl hidden items-center justify-center p-4">
  <div class="relative max-w-7xl w-full h-full flex flex-col">
    
    <!-- Close Button -->
    <button id="close-gallery" class="absolute top-6 right-6 z-20 w-14 h-14 bg-black/50 hover:bg-black/70 rounded-full flex items-center justify-center text-white transition-colors cursor-pointer">
      <svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Main Image Container with Loading State -->
    <div class="flex-1 flex items-center justify-center relative" style="max-height: 85vh;">
      
      <!-- Image Container with LQIP Background and Spinner -->
      <div class="relative">
        
        <!-- LQIP Background (always visible) -->
        <img 
          id="modal-lqip" 
          src="" 
          alt="" 
          class="absolute inset-0 w-full h-full object-contain blur-sm scale-105 opacity-30 transition-opacity duration-300" 
          style="max-height: 85vh; max-width: 90vw;"
        />
        
        <!-- Loading Spinner Overlay -->
        <div id="modal-spinner" class="absolute inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm rounded-lg transition-opacity duration-300">
          <div class="text-center">
            <svg class="animate-spin h-12 w-12 text-amber-400 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path>
            </svg>
            <p class="text-white text-sm">Loading image...</p>
          </div>
        </div>
        
        <!-- Main High-Res Image -->
        <img 
          id="modal-image" 
          src="" 
          alt="" 
          class="relative opacity-0 object-contain rounded-lg shadow-2xl transition-opacity duration-700" 
          style="max-height: 85vh; max-width: 90vw;"
        />
        
        <!-- Elegant Bottom Overlay for Image Info -->
        <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/70 to-transparent backdrop-blur-sm rounded-b-lg">
          <div class="p-8 text-center">
            <p id="image-counter" class="text-lg font-medium mb-3 text-amber-400"></p>
            <p id="image-alt-text" class="text-xl font-serif italic text-white leading-relaxed"></p>
          </div>
        </div>
      </div>
      
      <!-- Navigation Arrows (disabled while loading) -->
      <button id="prev-image" class="absolute left-6 top-1/2 -translate-y-1/2 w-16 h-16 bg-black/60 hover:bg-black/80 rounded-full flex items-center justify-center text-white transition-all duration-300 cursor-pointer hover:scale-110 disabled:opacity-30 disabled:cursor-not-allowed" disabled>
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button id="next-image" class="absolute right-6 top-1/2 -translate-y-1/2 w-16 h-16 bg-black/60 hover:bg-black/80 rounded-full flex items-center justify-center text-white transition-all duration-300 cursor-pointer hover:scale-110 disabled:opacity-30 disabled:cursor-not-allowed" disabled>
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>

    <!-- Preview Thumbnails Row -->
    <div class="flex items-center justify-center space-x-4 mt-6 mb-4">
      <!-- Previous Image Preview -->
      <div id="prev-preview" class="flex items-center space-x-3 cursor-pointer group">
        <div class="w-20 h-16 rounded-lg overflow-hidden bg-gray-800 border-2 border-gray-600 group-hover:border-white transition-colors">
          <img id="prev-preview-img" src="" alt="" class="w-full h-full object-cover" />
        </div>
        <span class="text-gray-400 text-sm group-hover:text-white transition-colors">Previous</span>
      </div>

      <!-- Current Image Indicator -->
      <div class="flex items-center space-x-2 mx-8">
        <div class="w-2 h-2 bg-gray-600 rounded-full"></div>
        <div class="w-3 h-3 bg-amber-400 rounded-full"></div>
        <div class="w-2 h-2 bg-gray-600 rounded-full"></div>
      </div>

      <!-- Next Image Preview -->
      <div id="next-preview" class="flex items-center space-x-3 cursor-pointer group">
        <span class="text-gray-400 text-sm group-hover:text-white transition-colors">Next</span>
        <div class="w-20 h-16 rounded-lg overflow-hidden bg-gray-800 border-2 border-gray-600 group-hover:border-white transition-colors">
          <img id="next-preview-img" src="" alt="" class="w-full h-full object-cover" />
        </div>
      </div>
    </div>

  </div>
</div>


  </div>
</Layout>

<script define:vars={{ vibeImages }}>
  // Helper function to capitalize first letter of each word
  function capitalizeWords(str) {
    if (!str) return '';
    return str.replace(/\w\S*/g, (txt) => 
      txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
    );
  }

  // Advanced Lazy Loading (keep existing)
  const lazyImages = document.querySelectorAll('.lazy-image');
  const imageObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        const src = img.dataset.src;
        if (src) {
          img.src = src;
          img.classList.add('opacity-100');
          img.classList.remove('opacity-0');
          observer.unobserve(img);
        }
      }
    });
  }, {
    rootMargin: '100px 0px',
    threshold: 0.1
  });

  lazyImages.forEach(img => imageObserver.observe(img));

  // Enhanced Gallery Modal Logic with Loading States
  let currentImages = [];
  let currentIndex = 0;
  let imageCache = new Map(); // Cache for preloaded images
  
  const modal = document.getElementById('gallery-modal');
  const modalImage = document.getElementById('modal-image');
  const modalLQIP = document.getElementById('modal-lqip');
  const modalSpinner = document.getElementById('modal-spinner');
  const imageCounter = document.getElementById('image-counter');
  const imageAltText = document.getElementById('image-alt-text');
  const closeBtn = document.getElementById('close-gallery');
  const prevBtn = document.getElementById('prev-image');
  const nextBtn = document.getElementById('next-image');
  const prevPreview = document.getElementById('prev-preview');
  const nextPreview = document.getElementById('next-preview');
  const prevPreviewImg = document.getElementById('prev-preview-img');
  const nextPreviewImg = document.getElementById('next-preview-img');

  const vibeImageData = vibeImages;

  function openModal(images, index) {
    currentImages = images;
    currentIndex = index;
    showImage();
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    document.body.style.overflow = 'hidden';
  }

  function closeModal() {
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    document.body.style.overflow = 'auto';
  }

  function showImage() {
    const image = currentImages[currentIndex];
    if (!image) return;

    // Show loading state immediately
    modalSpinner.style.display = 'flex';
    modalImage.style.opacity = '0';
    prevBtn.disabled = true;
    nextBtn.disabled = true;

    // Set LQIP immediately for instant feedback
    modalLQIP.src = image.placeholder || image.src;
    modalLQIP.style.opacity = '0.3';

    // Update UI elements
    imageCounter.textContent = `${currentIndex + 1} of ${currentImages.length}`;
    imageAltText.textContent = capitalizeWords(image.alt);

    // Check cache first
    if (imageCache.has(image.large)) {
      // Image is cached, show immediately
      modalImage.src = imageCache.get(image.large);
      onImageLoaded();
    } else {
      // Load new image
      const img = new Image();
      img.onload = () => {
        imageCache.set(image.large, img.src);
        modalImage.src = img.src;
        onImageLoaded();
      };
      img.onerror = () => {
        modalSpinner.style.display = 'none';
        modalLQIP.style.opacity = '0.5';
        prevBtn.disabled = false;
        nextBtn.disabled = false;
      };
      img.src = image.large;
    }

    // Update preview thumbnails
    updatePreviewThumbnails();
    
    // Preload adjacent images
    preloadAdjacentImages();
  }

  function onImageLoaded() {
    // Hide spinner and LQIP, show main image
    modalSpinner.style.display = 'none';
    modalLQIP.style.opacity = '0';
    modalImage.style.opacity = '1';
    prevBtn.disabled = false;
    nextBtn.disabled = false;
  }

  function preloadAdjacentImages() {
    const prevIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
    const nextIndex = (currentIndex + 1) % currentImages.length;
    
    // Preload previous image
    if (currentImages[prevIndex] && !imageCache.has(currentImages[prevIndex].large)) {
      const prevImg = new Image();
      prevImg.onload = () => imageCache.set(currentImages[prevIndex].large, prevImg.src);
      prevImg.src = currentImages[prevIndex].large;
    }
    
    // Preload next image
    if (currentImages[nextIndex] && !imageCache.has(currentImages[nextIndex].large)) {
      const nextImg = new Image();
      nextImg.onload = () => imageCache.set(currentImages[nextIndex].large, nextImg.src);
      nextImg.src = currentImages[nextIndex].large;
    }
  }

  function updatePreviewThumbnails() {
    const prevIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
    const nextIndex = (currentIndex + 1) % currentImages.length;
    
    // Update previous preview
    if (currentImages[prevIndex] && currentIndex > 0) {
      prevPreviewImg.src = currentImages[prevIndex].src;
      prevPreview.style.display = 'flex';
      prevPreview.style.opacity = '1';
    } else if (currentImages.length > 1) {
      prevPreviewImg.src = currentImages[currentImages.length - 1].src;
      prevPreview.style.display = 'flex';
      prevPreview.style.opacity = '0.7';
    } else {
      prevPreview.style.display = 'none';
    }
    
    // Update next preview
    if (currentImages[nextIndex] && currentIndex < currentImages.length - 1) {
      nextPreviewImg.src = currentImages[nextIndex].src;
      nextPreview.style.display = 'flex';
      nextPreview.style.opacity = '1';
    } else if (currentImages.length > 1) {
      nextPreviewImg.src = currentImages[0].src;
      nextPreview.style.display = 'flex';
      nextPreview.style.opacity = '0.7';
    } else {
      nextPreview.style.display = 'none';
    }
  }

  function nextImage() {
    currentIndex = (currentIndex + 1) % currentImages.length;
    showImage();
  }

  function prevImage() {
    currentIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
    showImage();
  }

  // Event Listeners
  document.querySelectorAll('[data-gallery-index]').forEach(el => {
    el.addEventListener('click', () => {
      const index = parseInt(el.dataset.galleryIndex);
      openModal(vibeImageData, index);
    });
  });

  closeBtn?.addEventListener('click', closeModal);
  prevBtn?.addEventListener('click', prevImage);
  nextBtn?.addEventListener('click', nextImage);
  prevPreview?.addEventListener('click', prevImage);
  nextPreview?.addEventListener('click', nextImage);

  // Keyboard Navigation
  document.addEventListener('keydown', (e) => {
    if (modal?.classList.contains('flex')) {
      if (e.key === 'Escape') closeModal();
      if (e.key === 'ArrowLeft') prevImage();
      if (e.key === 'ArrowRight') nextImage();
    }
  });

  // Close on backdrop click
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });
</script>

<style>
  /* Critical CSS for immediate render */
  .lazy-image {
    transition: opacity 0.7s ease-in-out;
  }
  
  /* Staggered Animation for Hero Mosaic */
  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(1.1);
    }
    to {
      opacity: 0.3;
      transform: scale(1);
    }
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: #1f2937;
  }
  
  ::-webkit-scrollbar-thumb {
    background: #f59e0b;
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: #d97706;
  }
</style>
