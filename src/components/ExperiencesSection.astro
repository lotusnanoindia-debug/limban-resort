---
import imageService from "../utils/ImageService.js";

export interface Props {
  experiences?: {
    aboveHeader?: string;
    title?: string;
    description?: string;
    experience?: Array<{
      title: string;
      description: string;
      image?: {
        id: string;
        fileName?: string;
        alt?: string;
        url?: string;
      };
      imageAltText?: string;
      feature?: Array<{ text: string }>;
      link?: string;
      buttonText?: string;
    }>;
  };
  gridClass?: string;
}

const { experiences, gridClass = "md:grid-cols-3" } = Astro.props;

// Process experience images through ImageService
const processedExperiences =
  experiences?.experience?.map((experience, index) => {
    const imageUrl = experience.image?.url
      ? imageService.processImage(
          {
            ...experience.image,
            context: {
              pageType: "homepage",
              contentName: experience.title,
              imageType: "service",
              index,
            },
          },
          "serviceCard",
          { quality: 70 },
        )
      : "/img/placeholder.webp";

    return {
      ...experience,
      imageUrl,
      alt:
        experience.image?.alt ||
        experience.imageAltText ||
        `${experience.title} - Limban Resort experience`,
      priority: index < 2,
    };
  }) || [];
---

{
  experiences && (
    <section
      id="experiences"
      class="py-24 md:py-32 bg-gray-1"
      role="region"
      aria-labelledby="experiences-title"
    >
      <div class="max-w-7xl mx-auto px-6">
        <header class="text-center mb-16">
          <div class="inline-block px-4 py-2 bg-amber-400/10 border border-amber-400/30 rounded-full mb-6">
            <span class="text-amber-400 text-xs font-medium tracking-widest uppercase">
              {experiences.aboveHeader}
            </span>
          </div>
          <h2
            id="experiences-title"
            class="font-serif text-4xl lg:text-6xl text-white mb-6"
          >
            {experiences.title}
          </h2>
          <p class="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed">
            {experiences.description}
          </p>
        </header>

        <!-- Swipe Hint - Mobile Only -->
        <div class="flex sm:hidden items-center justify-center gap-2 text-xs text-gray-500 mb-6">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"/>
          </svg>
          <span>Swipe</span>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
          </svg>
        </div>

        <!-- Mobile Swiper -->
        <div class="sm:hidden">
          <div 
            id="experiences-carousel" 
            class="overflow-x-auto snap-x snap-mandatory scrollbar-hide scroll-smooth"
          >
            <div class="flex gap-6">
              {processedExperiences.map((experience, index) => (
                <article class="snap-center w-80 flex-shrink-0 bg-gray-800/50 border border-gray-700 rounded-2xl overflow-hidden transition-all duration-500 hover:border-gray-600">
                  <div class="relative aspect-[4/3] overflow-hidden">
                    {experience.imageUrl && (
                      <img
                        src={experience.imageUrl}
                        alt={experience.alt}
                        loading={experience.priority ? "eager" : "lazy"}
                        class="w-full h-full object-cover transition-transform duration-700 hover:scale-105"
                        sizes="(max-width: 640px) 100vw, 320px"
                      />
                    )}
                  </div>

                  <div class="p-6">
                    <h3 class="font-serif text-3xl text-white mb-3">
                      {experience.title}
                    </h3>

                    <p class="text-gray-300 text-sm leading-relaxed mb-6 line-clamp-3">
                      {experience.description}
                    </p>

                    {experience.link && (
                      <a href={experience.link} class="home-cta w-full">
                        {experience.buttonText || "Learn More"}
                        <svg
                          class="w-4 h-4 ml-1"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M9 5l7 7-7 7"
                          />
                        </svg>
                      </a>
                    )}
                  </div>
                </article>
              ))}
            </div>
          </div>

          <!-- Dots - Mobile Only -->
          <div id="experiences-dots" class="flex justify-center gap-2 mt-8">
            {processedExperiences.map((_, i) => (
              <button 
                class="dot h-2 w-2 rounded-full bg-amber-400 transition-all duration-300"
                data-index={i}
                aria-label={`Go to experience ${i + 1}`}
              />
            ))}
          </div>
        </div>

        <!-- Desktop Grid -->
        <div class="hidden sm:grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {processedExperiences.map((experience, index) => (
            <article class="group bg-gray-800/50 border border-gray-700 rounded-2xl overflow-hidden transition-all duration-500 hover:border-gray-600 hover:-translate-y-1 hover:shadow-xl">
              <div class="relative aspect-[4/3] overflow-hidden">
                {experience.imageUrl && (
                  <img
                    src={experience.imageUrl}
                    alt={experience.alt}
                    loading={experience.priority ? "eager" : "lazy"}
                    class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                    sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw"
                  />
                )}
              </div>

              <div class="p-6">
                <h3 class="font-serif text-3xl text-white mb-4">
                  {experience.title}
                </h3>

                <p class="text-gray-300 text-sm leading-relaxed mb-6">
                  {experience.description}
                </p>

                {experience.link && (
                  <a href={experience.link} class="home-cta w-full">
                    {experience.buttonText || "Learn More"}
                    <svg
                      class="w-4 h-4 ml-1"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5l7 7-7 7"
                      />
                    </svg>
                  </a>
                )}
              </div>
            </article>
          ))}
        </div>
      </div>
    </section>
  )
}

<style>
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  const carousel = document.getElementById('experiences-carousel');
  const dots = document.querySelectorAll('#experiences-dots .dot');

  if (carousel && dots.length > 0) {
    const cardWidth = 344; // 320 + 24 gap

    function updateDots() {
      const scrollLeft = carousel.scrollLeft;
      const index = Math.round(scrollLeft / cardWidth);
      
      dots.forEach((dot, i) => {
        if (i === index) {
          dot.classList.add('bg-amber-400', 'w-6');
          dot.classList.remove('bg-gray-700','w-2');
        } else {
          dot.classList.remove('bg-amber-400', 'w-6');
          dot.classList.add('bg-gray-700','w-2');
        }
      });
    }

    carousel.addEventListener('scroll', updateDots, { passive: true });

    dots.forEach((dot, i) => {
      dot.addEventListener('click', () => {
        carousel.scrollTo({ left: cardWidth * i, behavior: 'smooth' });
      });
    });

    updateDots();
  }
</script>
