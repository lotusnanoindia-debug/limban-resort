---
export interface Props {
  roomName: string;
  roomSlug: string;
  basePrice?: number;
}

const { roomName, roomSlug, basePrice } = Astro.props;
const pageUrl = Astro.url.href;
---

<!-- Load Flatpickr CSS exactly like your ContactSection -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
/>
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/flatpickr/dist/themes/dark.css"
/>

<section aria-labelledby="reserve-heading">
  <h2
    id="reserve-heading"
    class="font-serif italic text-3xl md:text-4xl text-white mb-6"
  >
    Reserve Now: {roomName}
  </h2>
  <p class="text-gray-300 mb-12">
    Complete the form and our reservations team will confirm availability and
    safaris.
  </p>

  <!-- Success/Error Message -->
  <div id="form-message" class="hidden mb-6 p-4 rounded-xl text-center"></div>

  <form
    id="reservation-form"
    class="bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-xl border border-gray-700 rounded-2xl p-8"
  >
    <input type="hidden" name="form-name" value="reservation-room" />
    <input type="hidden" name="pageUrl" value={pageUrl} />
    <input type="hidden" name="roomName" value={roomName} />
    <input type="hidden" name="roomSlug" value={roomSlug} />
    {
      basePrice && (
        <input type="hidden" name="basePrice" value={String(basePrice)} />
      )
    }

    <div class="text-center pt-2">
      <div id="nights-message" class="text-sm italic text-gray-400 h-5"></div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
      <div>
        <label for="check-in" class="block text-sm text-gray-300 mb-2"
          >Check-in</label
        >
        <div class="relative">
          <div
            class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none"
          >
            <svg
              class="w-5 h-5 text-gray-400"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                d="M6 2a1 1 0 00-2 0v1H3a2 2 0 00-2 2v1h18V5a2 2 0 00-2-2h-1V2a1 1 0 10-2 0v1H6V2zM2 8v8a2 2 0 002 2h12a2 2 0 002-2V8H2zm3 3a1 1 0 011-1h1a1 1 0 110 2H6a1 1 0 01-1-1zm5 0a1 1 0 011-1h1a1 1 0 110 2h-1a1 1 0 01-1-1z"
              ></path>
            </svg>
          </div>
          <input
            id="check-in"
            name="checkin"
            type="text"
            required
            class="w-full rounded-md bg-gray-800 border border-gray-700 pl-12 pr-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors cursor-pointer"
          />
        </div>
      </div>
      <div>
        <label for="check-out" class="block text-sm text-gray-300 mb-2"
          >Check-out</label
        >
        <div class="relative">
          <div
            class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none"
          >
            <svg
              class="w-5 h-5 text-gray-400"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                d="M6 2a1 1 0 00-2 0v1H3a2 2 0 00-2 2v1h18V5a2 2 0 00-2-2h-1V2a1 1 0 10-2 0v1H6V2zM2 8v8a2 2 0 002 2h12a2 2 0 002-2V8H2zm3 3a1 1 0 011-1h1a1 1 0 110 2H6a1 1 0 01-1-1zm5 0a1 1 0 011-1h1a1 1 0 110 2h-1a1 1 0 01-1-1z"
              ></path>
            </svg>
          </div>
          <input
            id="check-out"
            name="checkout"
            type="text"
            required
            class="w-full rounded-md bg-gray-800 border border-gray-700 pl-12 pr-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors cursor-pointer"
          />
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-9">
      <!-- Contact -->
      <div>
        <label for="firstName" class="block text-sm text-gray-300 mb-2"
          >First Name</label
        >
        <input
          id="firstName"
          name="firstName"
          required
          minlength="2"
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        />
      </div>
      <div>
        <label for="lastName" class="block text-sm text-gray-300 mb-2"
          >Last Name</label
        >
        <input
          id="lastName"
          name="lastName"
          required
          minlength="2"
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        />
      </div>
      <div>
        <label for="email" class="block text-sm text-gray-300 mb-2">Email</label
        >
        <input
          id="email"
          name="email"
          type="email"
          required
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        />
      </div>
      <div>
        <label for="phone" class="block text-sm text-gray-300 mb-2"
          >Phone/WhatsApp</label
        >
        <input
          id="phone"
          name="phone"
          type="tel"
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        />
      </div>

      <!-- Party Size -->
      <div>
        <label for="adults" class="block text-sm text-gray-300 mb-2"
          >Adults</label
        >
        <input
          id="adults"
          name="adults"
          type="number"
          min="1"
          max="12"
          value="2"
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        />
      </div>
      <div>
        <label for="children" class="block text-sm text-gray-300 mb-2"
          >Children</label
        >
        <input
          id="children"
          name="children"
          type="number"
          min="0"
          max="12"
          value="0"
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        />
      </div>

      <!-- Safaris & Transfers -->
      <div>
        <label for="wantSafaris" class="block text-sm text-gray-300 mb-2"
          >Want Tiger Safaris?</label
        >
        <select
          id="wantSafaris"
          name="wantSafaris"
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        >
          <option value="yes">Yes, please arrange</option>
          <option value="no">No, room only</option>
          <option value="unsure">Unsure, please advise</option>
        </select>
      </div>
      <div>
        <label for="transfer" class="block text-sm text-gray-300 mb-2"
          >Need Airport Transfers?</label
        >
        <select
          id="transfer"
          name="transfer"
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        >
          <option>Yes, both ways</option>
          <option>Arrival only</option>
          <option>Departure only</option>
          <option>Not required</option>
        </select>
      </div>

      <!-- Notes -->
      <div class="md:col-span-2">
        <label for="message" class="block text-sm text-gray-300 mb-2"
          >Special Requests</label
        >
        <textarea
          id="message"
          name="message"
          rows="4"
          class="w-full rounded-md bg-gray-800 border border-gray-700 px-4 py-3 text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-colors"
        ></textarea>
      </div>
    </div>

    <div class="text-center pt-4">
      <button
        type="submit"
        id="submit-btn"
        class="w-full md:w-auto bg-gradient-to-r from-amber-500 to-orange-600 text-white font-semibold px-8 py-4 rounded-xl transition-all duration-300 hover:shadow-xl hover:-translate-y-1 hover:from-amber-600 hover:to-orange-700 cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
      >
        Request Reservation
      </button>
    </div>
  </form>
</section>

<script>
  // Import and initialize Flatpickr
  import(
    "https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/flatpickr.min.js"
  ).then(() => {
    const checkInRef = document.getElementById("check-in");
    const checkOutRef = document.getElementById("check-out");
    const nightsMessage = document.getElementById("nights-message");
    let checkInPicker, checkOutPicker;

    const baseConfig = {
      dateFormat: "M j, Y",
      minDate: "today",
      allowInput: false,
      clickOpens: true,
      theme: "dark",
    };

    checkInPicker = flatpickr(checkInRef, {
      ...baseConfig,
      maxDate: new Date().fp_incr(365),
      onChange: function (selectedDates) {
        if (selectedDates.length > 0) {
          const selectedDate = selectedDates[0];
          checkOutPicker?.set("minDate", selectedDate);
          calculateNights();
        }
      },
    });

    checkOutPicker = flatpickr(checkOutRef, {
      ...baseConfig,
      maxDate: new Date().fp_incr(365),
      onChange: function () {
        calculateNights();
      },
    });

    const calculateNights = () => {
      if (checkInRef?.value && checkOutRef?.value) {
        const checkIn = new Date(checkInRef.value);
        const checkOut = new Date(checkOutRef.value);
        if (checkOut <= checkIn) {
          nightsMessage.textContent = "Check-out must be after check-in!";
          nightsMessage.className =
            "bg-gray-900/50 border border-yellow-600/30 rounded-xl p-6 mb-6 shadow-lg text-red-400";
        } else {
          const diffTime = Math.abs(checkOut - checkIn);
          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
          nightsMessage.textContent = `You are reserving for ${diffDays} Night${diffDays !== 1 ? "s" : ""} 👍`;
          nightsMessage.className =
            "bg-gray-900/50 border border-yellow-600/30 rounded-xl p-6 mb-6 shadow-lg text-green-400";
        }
      } else {
        nightsMessage.textContent = "";
      }
    };
  });

  // Add Supabase form submission
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      const { supabase } = await import("../lib/supabase.js");

      const form = document.getElementById("reservation-form");
      const submitBtn = document.getElementById("submit-btn");
      const messageDiv = document.getElementById("form-message");

      if (!form) return;

      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Show loading state
        submitBtn.disabled = true;
        submitBtn.textContent = "Submitting...";
        showMessage("Submitting your request...", "loading");

        try {
          // Get form data
          const formData = new FormData(form);
          const submission = {
            form_name: formData.get("form-name"),
            pageUrl: formData.get("pageUrl"),
            roomName: formData.get("roomName"),
            roomSlug: formData.get("roomSlug"),
            basePrice: formData.get("basePrice"),
            checkin: formData.get("checkin"),
            checkout: formData.get("checkout"),
            firstName: formData.get("firstName"),
            lastName: formData.get("lastName"),
            email: formData.get("email"),
            phone: formData.get("phone"),
            adults: parseInt(formData.get("adults")),
            children: parseInt(formData.get("children")),
            wantSafaris: formData.get("wantSafaris"),
            transfer: formData.get("transfer"),
            message: formData.get("message"),
          };

          // Submit to Supabase
          const { data, error } = await supabase
            .from("contact_submissions")
            .insert([submission]);

          if (error) throw error;

          // Success! Replace form with elegant success message
          showSuccessMessage();
        } catch (error) {
          console.error("Submission error:", error);
          showMessage(
            "Sorry, there was an error submitting your request. Please try again or contact us directly.",
            "error",
          );
          submitBtn.disabled = false;
          submitBtn.textContent = "Request Reservation";
        }
      });

      function showMessage(text, type) {
        messageDiv.innerHTML = text;
        messageDiv.className = `mb-6 p-4 rounded-xl text-center ${
          type === "success"
            ? "bg-green-900/50 text-green-300 border border-green-700"
            : type === "error"
              ? "bg-red-900/50 text-red-300 border border-red-700"
              : "bg-blue-900/50 text-blue-300 border border-blue-700"
        }`;
        messageDiv.classList.remove("hidden");
      }

      function showSuccessMessage() {
        // Hide the form completely
        form.style.display = "none";

        // Show elegant success message
        messageDiv.innerHTML = `
          <div class="text-center py-12">
            <div class="text-6xl mb-6">🎉</div>
            <h3 class="text-2xl font-serif italic text-white mb-4">Thank You!</h3>
            <p class="text-lg text-gray-300 mb-6">Your reservation request has been submitted successfully.</p>
            <p class="text-gray-400 mb-8">Our team will contact you shortly to confirm availability and arrange your safaris.</p>
            <button 
              onclick="location.reload()" 
              class="bg-gradient-to-r from-amber-500 to-orange-600 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 hover:shadow-xl hover:-translate-y-1 hover:from-amber-600 hover:to-orange-700"
            >
              Submit Another Request
            </button>
          </div>
        `;
        messageDiv.className =
          "bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-xl border border-green-600 rounded-2xl p-8 text-center";
        messageDiv.classList.remove("hidden");
      }
    } catch (error) {
      console.error("Failed to load Supabase:", error);
    }
  });
</script>
