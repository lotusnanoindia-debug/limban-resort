---
import imageService from "../utils/ImageService.js";

const { heroes } = Astro.props;

const slides =
  heroes
    ?.map((h, i) => ({
      title: h.slideTitle,
      ctaText: h.ctaText || "Discover",
      ctaLink: h.ctaLink || "/rooms",
      image: h.backgroundImage
        ? imageService.processImage(
            {
              ...h.backgroundImage,
              context: {
                pageType: "homepage",
                contentName: h.slideTitle,
                imageType: "hero",
                index: i,
              },
            },
            "heroDesktop",
            { quality: 60 },
          )
        : null,
    }))
    .filter((s) => s.image) || [];

// Hardcoded menu labels
const menuLabels = [
  "Rooms & Suite",
  "Safari Experiences",
  "Dining Experiences",
  "Corporate Events",
  "Wellness & Spa",
  "Things to Do",
];
---

<!-- Preload first image for instant LCP -->{
  slides[0]?.image && (
    <link
      rel="preload"
      as="image"
      href={slides[0].image}
      fetchpriority="high"
    />
  )
}

<!-- Preload second image with lower priority -->
{
  slides[1]?.image && (
    <link rel="preload" as="image" href={slides[1].image} fetchpriority="low" />
  )
}

<section
  id="hero-section"
  class="h-screen relative overflow-hidden bg-black"
  data-slides={JSON.stringify(slides)}
>
  <!-- Background slides -->
  <div class="absolute inset-0">
    {
      slides.map((slide, i) => (
        <div
          class={`hero-slide absolute inset-0 transition-opacity duration-1000 ease-in-out ${i === 0 ? "opacity-100" : "opacity-0"}`}
          data-index={i}
          data-direction={i % 2 === 0 ? "in" : "out"}
          data-loaded="false"
        >
          {i === 0 ? (
            <img
              src={slide.image}
              alt={slide.title}
              loading="eager"
              fetchpriority="high"
              decoding="async"
              class="w-full h-full object-cover"
            />
          ) : (
            <img
              data-src={slide.image}
              alt={slide.title}
              decoding="async"
              class="w-full h-full object-cover bg-gray-900"
            />
          )}
          <div class="absolute inset-0 bg-black/30" />
        </div>
      ))
    }
    <div
      class="absolute inset-0 bg-gradient-to-b from-black/50 via-black/20 to-black/70"
    >
    </div>
  </div>

  <!-- Centred content -->
  <div class="relative h-full flex items-center justify-center z-20 px-6">
    <div class="text-center max-w-4xl">
      <h1
        id="hero-title"
        class="font-serif text-6xl md:text-7xl lg:text-8xl text-white mb-10 leading-none tracking-tight transition-opacity duration-500 ease-in-out"
      >
        {slides[0]?.title}
      </h1>

      <a
        id="hero-cta"
        href={slides[0]?.ctaLink}
        class="inline-block px-10 py-5 bg-amber-400 hover:bg-amber-500 text-gray-950 font-semibold rounded-full text-lg shadow-2xl shadow-amber-400/30 hover:scale-105 transition-all duration-300"
      >
        {slides[0]?.ctaText}
      </a>
    </div>
  </div>

  <!-- Desktop side navigation -->
  <nav class="hidden lg:block absolute right-8 top-1/2 -translate-y-1/2 z-30">
    <div class="flex flex-col gap-1">
      {
        slides.map((slide, i) => (
          <button
            class="nav-btn group flex items-center gap-3 py-3 px-4 rounded-l-full transition-all duration-200 hover:bg-amber-400/40 bg-black/25 backdrop-blur-md border border-white/10"
            data-index={i}
          >
            <div
              class={`nav-indicator w-1.5 h-1.5 rounded-full bg-white/40 transition-all duration-300 ${i === 0 ? "w-6 bg-amber-400" : ""}`}
            />
            <span class="text-xs text-white/80 group-hover:text-white transition-colors duration-200 whitespace-nowrap font-medium">
              {menuLabels[i]}
            </span>
          </button>
        ))
      }
    </div>
  </nav>

  <!-- Mobile dots -->
  <div
    class="lg:hidden absolute bottom-8 left-1/2 -translate-x-1/2 flex gap-2 z-30"
  >
    {
      slides.map((_, i) => (
        <button
          class={`mobile-dot w-2 h-2 rounded-full bg-white/40 transition-all duration-300 ${i === 0 ? "w-8 bg-white" : ""}`}
          data-index={i}
        />
      ))
    }
  </div>
</section>

<script>
  function initHero() {
    const heroSection = document.getElementById("hero-section");
    if (!heroSection) return;

    const slidesData = JSON.parse(heroSection.dataset.slides || "[]");
    if (slidesData.length <= 1) return;

    let currentIndex = 0;
    let isAutoplayActive = true;
    let isVisible = true;
    let intervalId = null;

    const slideContainers = heroSection.querySelectorAll(".hero-slide");
    const slideImages = heroSection.querySelectorAll(".hero-slide img");
    const navButtons = heroSection.querySelectorAll(".nav-btn");
    const navIndicators = heroSection.querySelectorAll(".nav-indicator");
    const mobileDots = heroSection.querySelectorAll(".mobile-dot");
    const titleElement = document.getElementById("hero-title");
    const ctaElement = document.getElementById("hero-cta");

    function loadImage(index) {
      const container = slideContainers[index];
      const img = slideImages[index];

      if (container.dataset.loaded === "false" && img.dataset.src) {
        img.src = img.dataset.src;
        img.removeAttribute("data-src");
        container.dataset.loaded = "true";
      }
    }

    function preloadNextImage(currentIdx) {
      const nextIdx = (currentIdx + 1) % slidesData.length;
      loadImage(nextIdx);
    }

    function goToSlide(index) {
      loadImage(index);

      currentIndex = index;
      const slide = slidesData[currentIndex];
      const container = slideContainers[index];
      const direction = container.dataset.direction;

      slideContainers.forEach((container, i) => {
        const img = slideImages[i];

        if (i === currentIndex) {
          container.classList.remove("opacity-0");
          container.classList.add("opacity-100");

          slideImages.forEach((image) => {
            if (image !== img) {
              image.style.willChange = "auto";
            }
          });

          img.style.willChange = "transform";
          img.classList.remove("animate-zoom-in", "animate-zoom-out");
          void img.offsetWidth;

          if (direction === "in") {
            img.classList.add("animate-zoom-in");
          } else {
            img.classList.add("animate-zoom-out");
          }

          setTimeout(() => {
            img.style.willChange = "auto";
          }, 6500);
        } else {
          container.classList.add("opacity-0");
          container.classList.remove("opacity-100");
          img.classList.remove("animate-zoom-in", "animate-zoom-out");
          img.style.willChange = "auto";
        }
      });

      navIndicators.forEach((indicator, i) => {
        if (i === currentIndex) {
          indicator.classList.add("w-6", "bg-amber-400");
          indicator.classList.remove("w-1.5", "bg-white/40");
        } else {
          indicator.classList.remove("w-6", "bg-amber-400");
          indicator.classList.add("w-1.5", "bg-white/40");
        }
      });

      mobileDots.forEach((dot, i) => {
        if (i === currentIndex) {
          dot.classList.add("w-8", "bg-white");
          dot.classList.remove("w-2", "bg-white/40");
        } else {
          dot.classList.remove("w-8", "bg-white");
          dot.classList.add("w-2", "bg-white/40");
        }
      });

      if (titleElement && ctaElement) {
        titleElement.style.opacity = "0";
        setTimeout(() => {
          titleElement.textContent = slide.title;
          ctaElement.textContent = slide.ctaText;
          ctaElement.href = slide.ctaLink;
          titleElement.style.opacity = "1";
        }, 500);
      }

      preloadNextImage(currentIndex);
    }

    function nextSlide() {
      if (isAutoplayActive && isVisible) {
        goToSlide((currentIndex + 1) % slidesData.length);
      }
    }

    function startCycle() {
      if (intervalId) clearInterval(intervalId);
      intervalId = setInterval(nextSlide, 6500);
    }

    function stopCycle() {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
      }
    }

    function stopAutoplay() {
      isAutoplayActive = false;
      stopCycle();
      slideImages.forEach((img) => {
        img.style.willChange = "auto";
      });
    }

    [...navButtons, ...mobileDots].forEach((btn) => {
      btn.addEventListener("click", () => {
        stopAutoplay();
        goToSlide(parseInt(btn.dataset.index));
      });
    });

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          isVisible = entry.isIntersecting;
          if (entry.isIntersecting && isAutoplayActive) {
            startCycle();
          } else {
            stopCycle();
            if (!entry.isIntersecting) {
              slideImages.forEach((img) => {
                img.style.willChange = "auto";
              });
            }
          }
        });
      },
      {
        threshold: 0.5,
      },
    );

    observer.observe(heroSection);

    slideContainers[0].dataset.loaded = "true";

    const firstDirection = slideContainers[0].dataset.direction;
    const firstImg = slideImages[0];
    firstImg.style.willChange = "transform";

    if (firstDirection === "in") {
      firstImg.classList.add("animate-zoom-in");
    } else {
      firstImg.classList.add("animate-zoom-out");
    }

    setTimeout(() => {
      firstImg.style.willChange = "auto";
    }, 6500);

    setTimeout(() => {
      loadImage(1);
    }, 1000);

    startCycle();
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initHero);
  } else {
    initHero();
  }
</script>

<style>
  .hero-slide img {
    backface-visibility: hidden;
    perspective: 1000px;
    transform: translateZ(0);
  }

  @keyframes zoom-in {
    0% {
      transform: scale(1) translateZ(0);
    }
    100% {
      transform: scale(1.08) translateZ(0);
    }
  }

  @keyframes zoom-out {
    0% {
      transform: scale(1.08) translateZ(0);
    }
    100% {
      transform: scale(1) translateZ(0);
    }
  }

  .animate-zoom-in {
    animation: zoom-in 6.5s ease-out forwards;
  }

  .animate-zoom-out {
    animation: zoom-out 6.5s ease-in forwards;
  }

  @media (max-width: 640px) {
    h1 {
      font-size: clamp(3rem, 12vw, 6rem) !important;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .animate-zoom-in,
    .animate-zoom-out {
      animation: none !important;
    }

    .hero-slide {
      transition-duration: 300ms !important;
    }
  }
</style>
