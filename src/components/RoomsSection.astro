---
// Enhanced Rooms Section Component with enterprise-grade reliability
export interface Props {
  rooms: Array<{
    id: string;
    roomName: string;
    shortDescription: string;
    basePrice: number;
    url: string;
    heroImage?: {
      optimisedCard?: string;
      url: string;
    };
  }>;
  specialDeal?: { html: string };
}

// Bulletproof URL validation
function validateImageUrl(url) {
  if (!url || typeof url !== 'string') return null;
  try {
    const parsed = new URL(url);
    return parsed.protocol === 'https:' ? url : null;
  } catch {
    return null;
  }
}

// Safe props destructuring with validation
const { rooms = [], specialDeal } = Astro.props;

// Validate and enhance room data
const validatedRooms = rooms
  .filter(room => room && room.roomName && room.id)
  .map((room, index) => {
    const primaryImage = validateImageUrl(room.heroImage?.optimisedCard) || 
                        validateImageUrl(room.heroImage?.url) || 
                        '/img/room-placeholder.jpg';
    
    return {
      ...room,
      validatedImage: primaryImage,
      priority: index < 3, // First 3 rooms get priority loading
      safePrice: Number(room.basePrice) || 0,
      safeUrl: room.url?.startsWith('/') ? room.url : `/rooms/${room.url || room.id}`
    };
  });
---

<section id="accommodations" class="py-32 bg-gray-800" role="region" aria-labelledby="accommodations-heading">
  <div class="max-w-7xl mx-auto px-6">
    <!-- Enhanced semantic heading structure -->
    <header class="text-center mb-20">
      <div class="text-sm text-gray-400 tracking-[0.2em] uppercase mb-4" role="doc-subtitle">
        Exceptional Accommodations!
      </div>
      <h2 id="accommodations-heading" class="font-serif italic text-4xl md:text-6xl text-white mb-8">
        Six Luxury Experiences
      </h2>
      <p class="text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed">
        Six distinctive accommodation experiences, each designed to provide the perfect balance of luxury, comfort, and authentic connection with the wilderness.
      </p>
    </header>

    <!-- Enhanced special deal section -->
    {specialDeal && specialDeal.html && (
      <div 
        class="max-w-4xl mx-auto mb-16 bg-gray-900/50 border border-yellow-600/30 rounded-xl p-6 text-center shadow-lg"
        role="complementary" 
        aria-label="Special offer"
      >
        <div
          class="font-semibold text-orange-300 max-w-none prose prose-orange"
          set:html={specialDeal.html}
        />
      </div>
    )}

    <!-- Optimized rooms grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8" role="list">
      {validatedRooms.length === 0 ? (
        <div class="col-span-full text-center py-12" role="status" aria-live="polite">
          <div class="w-16 h-16 mx-auto mb-4 text-gray-500">
            <svg class="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 14l-7-7-7 7m14 0v3a2 2 0 01-2 2H5a2 2 0 01-2-2v-3" />
            </svg>
          </div>
          <p class="text-gray-400 text-lg">Rooms are being updated. Please check back soon.</p>
        </div>
      ) : (
        validatedRooms.map((room, index) => (
        <article
          key={room.id}
          class="bg-gray-800/50 backdrop-blur-xl border border-gray-500 rounded-xl overflow-hidden shadow-lg shadow-white/5 hover:shadow-2xl transition-shadow duration-500 group flex flex-col"
          role="listitem"
          aria-labelledby={`room-${room.id}-name`}
        >
              <!-- Fixed image container -->
              <div class="w-full h-64 overflow-hidden relative">
                <picture>
                  <!-- Your existing picture sources -->
                  <source 
                    srcset={`${room.validatedImage}?format=avif&w=450&h=300&q=80`} 
                    type="image/avif"
                    media="(min-width: 768px)"
                  />
                  <source 
                    srcset={`${room.validatedImage}?format=webp&w=450&h=300&q=80`} 
                    type="image/webp"
                    media="(min-width: 768px)"
                  />
                  <img
                    src={room.validatedImage}
                    alt={`${room.roomName} - Luxury accommodation at Limban Resort in Tadoba, India`}
                    width="450"
                    height="300"
                    class="w-full h-64 object-cover transform transition-transform duration-700 ease-in-out will-change-transform group-hover:scale-110"
                    loading={room.priority ? 'eager' : 'lazy'}
                    fetchpriority={room.priority ? 'high' : 'auto'}
                    decoding="async"
                    data-room-id={room.id}
                  />
                </picture>
              </div>
              
              <!-- Loading state overlay -->
              <div class="absolute inset-0 bg-gray-700 animate-pulse room-loading hidden">
                <div class="flex items-center justify-center h-full">
                  <div class="w-8 h-8 border-2 border-amber-400 border-t-transparent rounded-full animate-spin"></div>
                </div>
              </div>
            </div>

            <!-- Enhanced content structure -->
            <div class="p-8 flex flex-col flex-grow">
              <header class="flex items-center mb-3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="w-5 h-5 mr-2 text-gray-400"
                  aria-hidden="true"
                >
                  <rect width="18" height="11" x="3" y="11" rx="2" ry="2" />
                  <circle cx="12" cy="5" r="2" />
                  <path d="m12 7-8 4v6l8-4 8 4v-6l-8-4Z" />
                </svg>
                <h3 id={`room-${room.id}-name`} class="text-xl text-white font-bold">
                  {room.roomName}
                </h3>
              </header>
              
              <p class="text-gray-400 mb-6 text-sm leading-relaxed flex-grow">
                {room.shortDescription}
              </p>
              
              <!-- Enhanced pricing and CTA -->
              <div class="space-y-4">
                <div class="pricing-section">
                  <span class="text-2xl font-bold text-white">
                    From â‚¹{room.safePrice.toLocaleString()}
                  </span>
                  <span class="text-sm text-gray-400 block">per night</span>
                </div>
                
                <a
                  href={room.safeUrl}
                  class="group relative block w-full text-center bg-gradient-to-r from-gray-100 to-gray-200 hover:from-orange-400 hover:to-orange-500 text-gray-900 hover:text-white px-6 py-3 rounded-lg text-sm font-medium tracking-wide transition-all duration-300 hover:shadow-lg border border-gray-300 hover:border-orange-400 focus:outline-none focus:ring-4 focus:ring-orange-400/50"
                  aria-label={`Learn more about ${room.roomName} accommodation`}
                >
                  <span class="relative z-10">Learn More</span>
                  <svg class="w-4 h-4 inline-block ml-2 opacity-0 group-hover:opacity-100 transition-opacity" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
            </div>
          </article>
        ))
      )}
    </div>
  </div>
</section>

<style>
  /* Enhanced focus states and accessibility */
  article:focus-within {
    outline: 2px solid rgba(251, 191, 36, 0.5);
    outline-offset: 2px;
  }

  /* Smooth image loading */
  .lazy-room-image {
    transition: opacity 0.3s ease-in-out;
  }

  .lazy-room-image[data-loaded="false"] {
    opacity: 0;
  }

  .lazy-room-image[data-loaded="true"] {
    opacity: 1;
  }

  /* Enhanced hover effects */
  article:hover {
    transform: translateY(-2px);
  }

  /* Loading state styling */
  .room-loading {
    z-index: 10;
  }

  /* Respect user motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .group-hover\:scale-110,
    .transition-transform,
    .transition-all {
      transform: none !important;
      transition: none !important;
    }
  }

  /* Enhanced contrast for accessibility */
  @media (prefers-contrast: high) {
    article {
      border-width: 2px;
      border-color: rgba(255, 255, 255, 0.8);
    }
  }
</style>

<script>
  // Enhanced lazy loading with error handling
  class RoomImageLoader {
    constructor() {
      this.observer = null;
      this.loadingImages = new Set();
      this.init();
    }

    init() {
      if ('IntersectionObserver' in window) {
        this.observer = new IntersectionObserver(
          (entries) => this.handleIntersection(entries),
          { rootMargin: '50px 0px', threshold: 0.1 }
        );
      }
      this.observeImages();
    }

    observeImages() {
      const images = document.querySelectorAll('.lazy-room-image');
      images.forEach(img => {
        img.dataset.loaded = 'false';
        
        if (this.observer) {
          this.observer.observe(img);
        } else {
          this.loadImage(img);
        }
      });
    }

    handleIntersection(entries) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          this.loadImage(entry.target);
          this.observer.unobserve(entry.target);
        }
      });
    }

    async loadImage(img) {
      const roomId = img.dataset.roomId;
      if (this.loadingImages.has(roomId)) return;
      
      this.loadingImages.add(roomId);
      this.showLoadingState(img);
      
      try {
        await this.preloadImage(img.src);
        img.dataset.loaded = 'true';
        this.hideLoadingState(img);
      } catch (error) {
        console.warn('Failed to load room image:', img.src);
        this.handleImageError(img);
      } finally {
        this.loadingImages.delete(roomId);
      }
    }

    preloadImage(src) {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = resolve;
        img.onerror = reject;
        img.src = src;
      });
    }

    showLoadingState(img) {
      const article = img.closest('article');
      const loader = article?.querySelector('.room-loading');
      if (loader) {
        loader.classList.remove('hidden');
      }
    }

    hideLoadingState(img) {
      const article = img.closest('article');
      const loader = article?.querySelector('.room-loading');
      if (loader) {
        loader.classList.add('hidden');
      }
    }

    handleImageError(img) {
      img.src = '/img/room-placeholder.jpg';
      img.alt = 'Room image temporarily unavailable';
      img.dataset.loaded = 'true';
      this.hideLoadingState(img);
    }
  }

  // Initialize enhanced room image loader
  document.addEventListener('DOMContentLoaded', () => {
    new RoomImageLoader();
  });

  // Enhanced error boundary
  window.addEventListener('error', (e) => {
    if (e.target && e.target.classList?.contains('lazy-room-image')) {
      console.warn('Room image failed to load:', e.target.src);
      e.target.src = '/img/room-placeholder.jpg';
      e.target.alt = 'Room image temporarily unavailable';
    }
  });

  // Track room interactions for analytics
  document.querySelectorAll('article a[href*="/rooms/"]').forEach(link => {
    link.addEventListener('click', (e) => {
      const roomName = e.target.closest('article')?.querySelector('h3')?.textContent;
      if (roomName && typeof gtag !== 'undefined') {
        gtag('event', 'room_view', {
          'event_category': 'engagement',
          'event_label': roomName
        });
      }
    });
  });
</script>
