---
const { heroes } = Astro.props;
// NO generateResponsiveSrc function needed - use API variants directly!
---

<section class="h-screen relative overflow-hidden">
  <!-- Loading Overlay -->
  <div
    id="loading-overlay"
    class="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 invisible transition-all duration-300"
  >
    <div class="text-center">
      <div
        class="w-12 h-12 border-4 border-amber-400 border-t-transparent rounded-full animate-spin mx-auto mb-4"
      >
      </div>
      <p class="text-white text-lg font-light">Loading image...</p>
    </div>
  </div>

  <!-- Navigation Arrows -->
  <div
    class="carousel-nav absolute inset-y-0 left-0 right-0 z-30 flex items-center justify-between px-6 opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none"
  >
    <button
      id="prev-btn"
      class="bg-black/30 hover:bg-black/50 backdrop-blur-md rounded-full p-4 text-white hover:text-amber-300 transition-all duration-300 pointer-events-auto cursor-pointer"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    <button
      id="next-btn"
      class="bg-black/30 hover:bg-black/50 backdrop-blur-md rounded-full p-4 text-white hover:text-amber-300 transition-all duration-300 pointer-events-auto cursor-pointer"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
  </div>

  <div id="hero-carousel" class="h-full relative">
    {
      heroes.map((hero, index) => (
        <div
          class="hero-slide absolute inset-0 w-full h-full"
          data-slide={index}
          style={
            index === 0 ? "opacity: 1; z-index: 2;" : "opacity: 0; z-index: 1;"
          }
        >
          {/* Use GraphCMS optimized variants directly - NO fallbacks to original URL */}
          {index === 0 ? (
            <picture class="absolute inset-0 w-full h-full">
              <source
                srcset={hero.backgroundImage?.hero4K}
                type="image/webp"
                media="(min-width: 1600px)"
              />
              <source
                srcset={hero.backgroundImage?.heroDesktop}
                type="image/webp"
                media="(min-width: 1200px)"
              />
              <source
                srcset={hero.backgroundImage?.heroTablet}
                type="image/webp"
                media="(min-width: 768px)"
              />
              <img
                src={hero.backgroundImage?.heroMobile}
                alt={hero.slideTitle}
                class="w-full h-full object-cover"
                loading="eager"
                fetchpriority="high"
              />
            </picture>
          ) : (
            <picture class="absolute inset-0 w-full h-full">
              <source
                data-srcset={hero.backgroundImage?.hero4K}
                type="image/webp"
                media="(min-width: 1600px)"
              />
              <source
                data-srcset={hero.backgroundImage?.heroDesktop}
                type="image/webp"
                media="(min-width: 1200px)"
              />
              <source
                data-srcset={hero.backgroundImage?.heroTablet}
                type="image/webp"
                media="(min-width: 768px)"
              />
              <img
                src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='50'%3E%3Crect width='100%25' height='100%25' fill='%23000000'/%3E%3C/svg%3E"
                data-src={hero.backgroundImage?.heroMobile}
                alt={hero.slideTitle}
                class="w-full h-full object-cover lazy-image"
              />
            </picture>
          )}

          <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-black/20" />
          <div class="absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-black/60" />

          <div class="relative h-full flex items-center justify-center text-center z-20">
            <div class="max-w-4xl mx-auto px-8">
              <h1 class="font-serif italic text-4xl sm:text-6xl md:text-7xl lg:text-8xl text-white mb-6 sm:mb-8 leading-[0.95] tracking-tight">
                {hero.slideTitle}
              </h1>
              {hero.subtitle && (
                <h2 class="text-lg sm:text-xl md:text-2xl lg:text-3xl text-white/90 font-light mb-12 sm:mb-16 leading-relaxed max-w-3xl mx-auto tracking-wide">
                  {hero.subtitle}
                </h2>
              )}
              {hero.ctaText && (
                <a
                  href={hero.ctaLink || "#"}
                  class="cta-button group relative inline-block rounded-2xl border border-amber-500/30 bg-amber-300/30 backdrop-blur-xl px-12 py-6 text-xl font-semibold tracking-wide text-amber-50 shadow-[0_8px_24px_rgba(217,119,6,0.25)] transition-all duration-700 ease-out overflow-hidden z-40 cursor-pointer"
                >
                  <span class="absolute inset-0 -top-[2px] -left-full h-[102%] w-1/2 bg-gradient-to-r from-transparent via-white/20 to-transparent skew-x-[-20deg] transition-all duration-1000 ease-out group-hover:left-full opacity-0 group-hover:opacity-100" />
                  <span class="relative z-10">{hero.ctaText}</span>
                </a>
              )}
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <!-- Dot Navigation -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-30">
    <div class="flex space-x-3">
      {
        heroes.map((_, index) => (
          <button
            class={`dot-indicator w-3 h-3 rounded-full transition-all duration-300 cursor-pointer ${index === 0 ? "bg-amber-400 scale-125" : "bg-white/40 hover:bg-white/70 hover:scale-110"}`}
            data-slide={index}
          />
        ))
      }
    </div>
  </div>
</section>

<style>
  .hero-slide {
    transition: opacity 2s ease-in-out;
  }

  .hero-slide img {
    transform: scale(1.05);
    transition: transform 15s ease-out;
  }

  .lazy-image {
    filter: blur(5px);
    transition: filter 0.5s ease-in-out;
  }

  .lazy-image.loaded {
    filter: none;
  }

  .loading-overlay-visible {
    opacity: 1 !important;
    visibility: visible !important;
  }

  @media (max-width: 767px) {
    .carousel-nav {
      opacity: 1;
    }
  }
</style>

<script>
  let currentSlide = 0;
  let autoAdvanceInterval;
  let loadedImages = new Set([0]);
  const slides = document.querySelectorAll(".hero-slide");
  const dots = document.querySelectorAll(".dot-indicator");
  const totalSlides = slides.length;
  const loadingOverlay = document.getElementById("loading-overlay");

  function lazyLoadImage(slideIndex, priority = "low") {
    return new Promise((resolve, reject) => {
      if (loadedImages.has(slideIndex)) {
        resolve();
        return;
      }

      const slide = slides[slideIndex];
      if (!slide) {
        reject(new Error("Slide not found"));
        return;
      }

      const img = slide.querySelector(".lazy-image");
      const sources = slide.querySelectorAll("source[data-srcset]");

      if (!img || !img.dataset.src) {
        resolve();
        return;
      }

      // Load sources - these are already optimized by GraphCMS
      sources.forEach((source) => {
        if (source.dataset.srcset) {
          source.srcset = source.dataset.srcset;
          delete source.dataset.srcset;
        }
      });

      // Preload the mobile version (smallest)
      const preloadImg = new Image();

      if (priority === "high") {
        preloadImg.fetchPriority = "high";
      }

      preloadImg.onload = () => {
        img.src = img.dataset.src;
        img.classList.add("loaded");
        delete img.dataset.src;
        loadedImages.add(slideIndex);
        resolve();
      };

      preloadImg.onerror = (error) => {
        console.error(`❌ Failed to load slide ${slideIndex}`);
        reject(error);
      };

      preloadImg.src = img.dataset.src;
    });
  }

  function showLoadingOverlay(show = true) {
    if (!loadingOverlay) return;

    if (show) {
      loadingOverlay.classList.add("loading-overlay-visible");
    } else {
      loadingOverlay.classList.remove("loading-overlay-visible");
    }
  }

  function initializeProgressiveLoading() {
    // Load next slide after 1 second
    if (totalSlides > 1) {
      setTimeout(() => {
        lazyLoadImage(1, "high").then(() => {
          console.log("!");
        });
      }, 1000);
    }

    // Load others very conservatively
    setTimeout(() => {
      for (let i = 2; i < totalSlides; i++) {
        setTimeout(
          () => {
            lazyLoadImage(i, "low");
          },
          (i - 2) * 3000
        ); // 3 second intervals
      }
    }, 5000);
  }

  async function goToSlide(slideIndex, userInitiated = false) {
    if (slideIndex === currentSlide) return;

    if (userInitiated && !loadedImages.has(slideIndex)) {
      showLoadingOverlay(true);

      try {
        await lazyLoadImage(slideIndex, "high");
      } catch (error) {
        console.error("Failed to load image:", error);
        showLoadingOverlay(false);
        return;
      }

      showLoadingOverlay(false);
    }

    // Crossfade animation
    slides[slideIndex].style.zIndex = "2";
    slides[slideIndex].style.opacity = "0";
    slides[slideIndex].offsetHeight;
    slides[slideIndex].style.opacity = "1";
    slides[currentSlide].style.opacity = "0";

    // Update dots
    dots[currentSlide].classList.remove("bg-amber-400", "scale-125");
    dots[currentSlide].classList.add("bg-white/40");
    dots[slideIndex].classList.remove("bg-white/40");
    dots[slideIndex].classList.add("bg-amber-400", "scale-125");

    setTimeout(() => {
      slides[currentSlide].style.zIndex = "1";
      currentSlide = slideIndex;
    }, 2000);
  }

  function showNextSlide() {
    const nextIndex = (currentSlide + 1) % totalSlides;
    goToSlide(nextIndex, false);
  }

  function showPrevSlide() {
    const prevIndex = (currentSlide - 1 + totalSlides) % totalSlides;
    goToSlide(prevIndex, false);
  }

  function startAutoAdvance() {
    if (autoAdvanceInterval) clearInterval(autoAdvanceInterval);
    if (totalSlides > 1) {
      autoAdvanceInterval = setInterval(showNextSlide, 8000);
    }
  }

  // Event listeners
  document.getElementById("prev-btn")?.addEventListener("click", (e) => {
    e.stopPropagation();
    showPrevSlide();
    clearInterval(autoAdvanceInterval);
    startAutoAdvance();
  });

  document.getElementById("next-btn")?.addEventListener("click", (e) => {
    e.stopPropagation();
    showNextSlide();
    clearInterval(autoAdvanceInterval);
    startAutoAdvance();
  });

  dots.forEach((dot, index) => {
    dot.addEventListener("click", (e) => {
      e.stopPropagation();
      if (index !== currentSlide) {
        goToSlide(index, true);
        clearInterval(autoAdvanceInterval);
        startAutoAdvance();
      }
    });
  });

  window.addEventListener("load", () => {
    initializeProgressiveLoading();
    startAutoAdvance();
  });
</script>
