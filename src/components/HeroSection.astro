---
import OptimizedImage from '../components/OptimizedImage.astro';
const { heroes } = Astro.props;
---

<section class="h-screen relative overflow-hidden" role="banner" aria-label="Hero carousel">
  <!-- Keep your existing loading indicator exactly as is -->
  <div
    id="loading-overlay"
    class="fixed inset-0 bg-black/90 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 invisible transition-opacity duration-300"
    role="status"
    aria-label="Loading content"
  >
    <div class="text-center">
      <div class="w-8 h-8 border-2 border-amber-400 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
      <p class="text-white font-light">Loading...</p>
    </div>
  </div>

  <div id="hero-carousel" class="h-full relative">
    {heroes.map((hero, index) => (
      <div
        class="hero-slide absolute inset-0 w-full h-full"
        data-slide={index}
        style={index === 0 ? "opacity: 1; z-index: 2;" : "opacity: 0; z-index: 1;"}
      >
        {/* FIXED: Use the correct hero data structure for OptimizedImage */}
        <div class="absolute inset-0 w-full h-full">
          <OptimizedImage 
            image={{
              url: hero.heroImage?.url || hero.backgroundImage?.url,
              alt: hero.heroImage?.alt || `${hero.slideTitle} - Limban Resort luxury safari experience`
            }}
            variant="heroDesktop"
            loading={index === 0 ? "eager" : "lazy"}
            class={`w-full h-full object-cover ${index === 0 ? 'scale-102' : 'lazy-image scale-102'}`}
          />
        </div>

        <!-- Keep your existing gradient overlay exactly as is -->
        <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent"></div>

        <!-- Keep your existing content exactly as is -->
        <div class="relative h-full flex items-center justify-center text-center z-20">
          <div class="max-w-5xl mx-auto px-6">
            <h1 class="font-serif italic text-4xl sm:text-6xl lg:text-8xl text-white mb-6 leading-tight tracking-tight">
              {hero.slideTitle}
            </h1>
            {hero.subtitle && (
              <p class="text-lg sm:text-xl lg:text-2xl text-gray-100 font-light mb-12 leading-relaxed max-w-4xl mx-auto">
                {hero.subtitle}
              </p>
            )}
            {hero.ctaText && (
              <a
                href={hero.ctaLink || "/rooms"}
                class="inline-flex items-center px-8 py-4 bg-amber-400/90 hover:bg-amber-400 text-gray-900 font-semibold rounded-full transition-all duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-amber-400/50 shadow-xl"
              >
                {hero.ctaText}
                <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                </svg>
              </a>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Keep your existing dots navigation exactly as is -->
  {heroes.length > 1 && (
    <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-30" role="tablist" aria-label="Slide navigation">
      <div class="flex space-x-3">
        {heroes.map((_, index) => (
          <button
            class={`dot-indicator w-3 h-3 rounded-full transition-all duration-300 ${
              index === 0 ? "bg-amber-400 scale-125" : "bg-white/40 hover:bg-white/70 hover:scale-110"
            }`}
            data-slide={index}
            role="tab"
            aria-selected={index === 0}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    </div>
  )}
</section>

<!-- Keep ALL your existing styles exactly as they were -->
<style>
  .hero-slide {
    transition: opacity 1.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .hero-slide img {
    transform: scale(1.02);
    transition: transform 20s ease-out, opacity 0.7s ease-in-out;
  }

  .scale-102 {
    transform: scale(1.02);
    transition: transform 20s ease-out, opacity 0.7s ease-in-out;
  }

  .lazy-image {
    filter: blur(8px);
    transition: filter 0.5s ease-in-out, opacity 0.5s ease-in-out;
  }

  .lazy-image.loaded {
    filter: none;
  }

  .dot-indicator:focus {
    outline: 2px solid #fbbf24;
    outline-offset: 2px;
  }

  .loading-overlay-visible {
    opacity: 1 !important;
    visibility: visible !important;
  }
</style>

<!-- Keep ALL your existing JavaScript exactly as it was -->
<script>
  class HeroCarousel {
    constructor() {
      this.currentSlide = 0;
      this.autoAdvanceInterval = null;
      this.loadedImages = new Set([0]);
      this.slides = document.querySelectorAll(".hero-slide");
      this.dots = document.querySelectorAll(".dot-indicator");
      this.totalSlides = this.slides.length;
      this.loadingOverlay = document.getElementById("loading-overlay");
      
      this.init();
    }

    init() {
      if (this.totalSlides <= 1) return;
      
      this.bindEvents();
      this.startProgressiveLoading();
      this.startAutoAdvance();
    }

    async loadImage(slideIndex) {
      if (this.loadedImages.has(slideIndex)) return true;

      const slide = this.slides[slideIndex];
      if (!slide) return false;

      const img = slide.querySelector(".lazy-image");
      const sources = slide.querySelectorAll("source[data-srcset]");

      if (!img?.dataset?.src && !img?.src?.includes('data:image')) return true;

      return new Promise((resolve) => {
        sources.forEach(source => {
          if (source.dataset.srcset) {
            source.srcset = source.dataset.srcset;
            delete source.dataset.srcset;
          }
        });

        img.onload = () => {
          img.classList.add("loaded");
          if (img.dataset.src) delete img.dataset.src;
          this.loadedImages.add(slideIndex);
          resolve(true);
        };

        img.onerror = () => resolve(false);
        if (img.dataset.src) img.src = img.dataset.src;
      });
    }

    showLoadingOverlay(show = true) {
      if (!this.loadingOverlay) return;
      this.loadingOverlay.classList.toggle("loading-overlay-visible", show);
    }

    startProgressiveLoading() {
      if (this.totalSlides > 1) {
        setTimeout(() => this.loadImage(1), 2000);
      }

      if (this.totalSlides > 2) {
        setTimeout(() => {
          for (let i = 2; i < this.totalSlides; i++) {
            setTimeout(() => this.loadImage(i), (i - 2) * 3000);
          }
        }, 5000);
      }
    }

    async goToSlide(slideIndex, userInitiated = false) {
      if (slideIndex === this.currentSlide || slideIndex >= this.totalSlides) return;

      if (userInitiated && !this.loadedImages.has(slideIndex)) {
        this.showLoadingOverlay(true);
        await this.loadImage(slideIndex);
        this.showLoadingOverlay(false);
      }

      this.slides[slideIndex].style.zIndex = "2";
      this.slides[slideIndex].style.opacity = "1";
      this.slides[this.currentSlide].style.opacity = "0";

      this.dots[this.currentSlide]?.classList.remove("bg-amber-400", "scale-125");
      this.dots[this.currentSlide]?.classList.add("bg-white/40");
      this.dots[this.currentSlide]?.setAttribute("aria-selected", "false");
      
      this.dots[slideIndex]?.classList.remove("bg-white/40");
      this.dots[slideIndex]?.classList.add("bg-amber-400", "scale-125");
      this.dots[slideIndex]?.setAttribute("aria-selected", "true");

      setTimeout(() => {
        this.slides[this.currentSlide].style.zIndex = "1";
        this.currentSlide = slideIndex;
      }, 1500);
    }

    nextSlide() {
      const nextIndex = (this.currentSlide + 1) % this.totalSlides;
      this.goToSlide(nextIndex, false);
    }

    startAutoAdvance() {
      if (this.totalSlides <= 1) return;
      this.autoAdvanceInterval = setInterval(() => this.nextSlide(), 8000);
    }

    stopAutoAdvance() {
      if (this.autoAdvanceInterval) {
        clearInterval(this.autoAdvanceInterval);
        this.autoAdvanceInterval = null;
      }
    }

    bindEvents() {
      this.dots.forEach((dot, index) => {
        dot.addEventListener("click", () => {
          if (index !== this.currentSlide) {
            this.stopAutoAdvance();
            this.goToSlide(index, true);
            this.startAutoAdvance();
          }
        });

        dot.addEventListener("keydown", (e) => {
          if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            dot.click();
          }
        });
      });

      const carousel = document.getElementById("hero-carousel");
      carousel?.addEventListener("mouseenter", () => this.stopAutoAdvance());
      carousel?.addEventListener("mouseleave", () => this.startAutoAdvance());
      carousel?.addEventListener("focusin", () => this.stopAutoAdvance());
      carousel?.addEventListener("focusout", () => this.startAutoAdvance());
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => new HeroCarousel());
  } else {
    new HeroCarousel();
  }
</script>
