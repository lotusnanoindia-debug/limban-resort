---
import type { HTMLAttributes } from 'astro/types';

interface Image {
  placeholder?: string;
  srcset?: string;
  src?: string;
  alt: string;
  width?: number;
  height?: number;
}

interface Props extends HTMLAttributes<'div'> {
  images: Image[];
  layout?: 'grid' | 'masonry';
  galleryType?: string;
  gridId?: string;
  loadingStrategy?: string;
  priority?: number;
}

const { images, layout = 'grid', galleryType, gridId, loadingStrategy, priority, ...attrs } = Astro.props;

const gridClass = layout === 'masonry'
  ? 'columns-2 lg:columns-3 xl:columns-4 gap-6 space-y-6'
  : 'grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6';

const imageContainerClass = layout === 'masonry'
  ? 'break-inside-avoid mb-6'
  : 'aspect-square';

const imageClass = layout === 'masonry'
  ? 'relative w-full h-auto object-cover'
  : 'relative w-full h-full object-cover';
---

<div id={gridId} class:list={[gridClass, 'gallery-grid-component']} {...attrs}>
  {images.map((image, index) => (
    <div 
      key={index}
      class:list={['group cursor-pointer', imageContainerClass]}
      data-gallery-index={index}
      data-gallery-type={galleryType}
    >
      <div class="relative w-full h-full overflow-hidden rounded-2xl bg-gray-800 hover:shadow-2xl hover:shadow-black/50 transition-all duration-1000 hover:scale-[1.01]">
        
        <!-- LQIP Background -->
        <div class="absolute inset-0">
          <img src={image.placeholder} alt="" class="w-full h-full object-cover blur-sm scale-110" />
        </div>
        
        <!-- Main Image -->
        <img
          src={image.placeholder}
          data-srcset={image.srcset}
          data-src={image.src}
          sizes={layout === 'masonry' ? '(min-width: 1280px) 25vw, (min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw' : '(min-width: 1024px) 25vw, (min-width: 768px) 33vw, 50vw'}
          alt={image.alt}
          class:list={[imageClass, 'lazy-image opacity-0 transition-opacity duration-700 blur-sm']}
          style={layout === 'masonry' && image.width && image.height ? `aspect-ratio: ${image.width}/${image.height}` : ''}
          loading="lazy"
          width={image.width}
          height={image.height}
        />
        
        <!-- Hover Overlay -->
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500 flex items-center justify-center">
          <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>
    </div>
  ))}
</div>

<script>
  const lazyImages = document.querySelectorAll('.gallery-grid-component .lazy-image');
  const imageObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.srcset = img.dataset.srcset || '';
        img.src = img.dataset.src || '';
        img.addEventListener('load', () => {
          img.classList.remove('blur-sm');  // Remove blur effect
          img.classList.add('opacity-100');  // Fade to visible
        }, { once: true });
        observer.unobserve(img);
      }
    });
  }, { rootMargin: '200px 0px', threshold: 0.01 });
  lazyImages.forEach(img => imageObserver.observe(img));
  window.globalImageObserver = imageObserver;
</script>
