---
import { Icon } from 'astro-icon/components'
import imageService from '../utils/ImageService.js';

const { subHero } = Astro.props;

// Process image through ImageService
const imageData = subHero?.subHeroImage || subHero?.image;
const imageUrl = imageData ? 
  imageService.processImage({
    ...imageData,
    context: {
      pageType: 'homepage',
      contentName: subHero.title || 'About Limban',
      imageType: 'subhero'
    }
  }, 'subhero', { quality: 40 }) : '';

const imageAlt = subHero?.subHeroImage?.altText || 
  subHero?.imageAltText || 
  "Limban Resort luxury safari experience in Tadoba National Park";
---

{subHero && (
  <section class="relative py-32 md:py-40 overflow-hidden" id="about" role="region" aria-labelledby="subhero-title">
    <!-- Gradient background -->
    <div class="absolute inset-0 bg-gradient-to-b from-gray-1 via-gray-0 to-gray-1"></div>
    
    <!-- Decorative ambient glows -->
    <div class="absolute top-0 left-0 w-96 h-96 bg-amber-400/5 rounded-full blur-3xl"></div>
    <div class="absolute bottom-0 right-0 w-96 h-96 bg-amber-400/3 rounded-full blur-3xl"></div>
    
    <div class="relative max-w-7xl mx-auto px-6">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-16 lg:gap-20 items-center">
        
        <!-- Content section -->
        <div class="order-2 lg:order-1 space-y-12">
          {subHero.aboveHeader && (
            <div class="inline-flex items-center gap-2.5 px-4 py-2 bg-amber-400/5 border border-amber-400/20 rounded-full backdrop-blur-sm">
              <span class="w-1 h-1 bg-amber-400 rounded-full"></span>
              <span class="text-amber-400/90 text-[10px] font-medium tracking-[0.25em] uppercase">
                {subHero.aboveHeader}
              </span>
            </div>
          )}
          
          <h2 
            id="subhero-title"
            class="font-serif text-4xl md:text-5xl lg:text-6xl text-white leading-[1.1] tracking-tight max-w-lg"
          >
            {subHero.title}
          </h2>

          <!-- Stats Grid -->
          {subHero.stats && subHero.stats.length > 0 && (
            <div class="grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-4" role="list" aria-label="Resort highlights">
              {subHero.stats.map((stat, index) => (
                <div
                  key={index}
                  class="group relative bg-gradient-to-br from-gray-900/60 to-black/40 backdrop-blur-sm border border-amber-400/30 rounded-2xl p-5 md:p-6 transition-all duration-500 hover:border-amber-400/50 hover:-translate-y-1 hover:shadow-lg hover:shadow-amber-400/10"
                  role="listitem"
                >
                  <!-- Glow effect on hover -->
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-br from-amber-400/0 to-amber-400/0 group-hover:from-amber-400/5 group-hover:to-transparent transition-all duration-500"></div>
                  
                  <div class="relative">
                    <div class="w-5 h-5 mb-3 text-amber-400/70 group-hover:text-amber-400 transition-colors duration-300">
                      <Icon name={stat.svg} class="w-full h-full" />
                    </div>
                    
                    <div class="text-4xl font-bold mb-1.5 font-serif text-white">
                      {stat.number}
                    </div>
                    
                    <div class="text-sm md:text-xs text-gray-400 leading-snug tracking-wide font-light uppercase group-hover:text-gray-400 transition-colors duration-300">
                      {stat.label}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
          
          <!-- CTA -->
          <div class="pt-2">
            <a 
              href="/vibe" 
              class="inline-flex items-center gap-2.5 px-8 py-4 bg-white/5 hover:bg-white/10 border border-white/10 hover:border-amber-400/30 text-white rounded-full transition-all duration-300 hover:scale-[1.02] group backdrop-blur-sm"
            >
              <span class="text-sm font-medium tracking-wide">Explore Limban</span>
              <svg class="w-3.5 h-3.5 transition-transform duration-300 group-hover:translate-x-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
        
        <!-- Image section -->
        <div class="order-1 lg:order-2 hidden sm:block">
          <div class="relative">
            <!-- Decorative glow around image -->
            <div class="absolute -inset-8 bg-gradient-to-br from-amber-400/10 via-transparent to-transparent rounded-full blur-3xl opacity-50"></div>
            
            <div class="relative aspect-[4/5] rounded-3xl overflow-hidden shadow-2xl shadow-black/60">
              {imageUrl && (
                <>
                  <img
                    src={imageUrl}
                    alt={imageAlt}
                    loading="lazy"
                    class="w-full h-full object-cover transition-all duration-700 hover:scale-105"
                  />
                  <div class="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent pointer-events-none"></div>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
)}

<script>
  if ('IntersectionObserver' in window) {
    const statsObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const statElement = entry.target;
          const numberElement = statElement.querySelector('.text-2xl');
          
          if (numberElement && !numberElement.classList.contains('animated')) {
            numberElement.dataset.number = numberElement.textContent;
            animateNumber(numberElement);
            numberElement.classList.add('animated');
          }
          
          statsObserver.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.5,
      rootMargin: '0px 0px -50px 0px'
    });

    document.querySelectorAll('[role="listitem"]').forEach(stat => {
      statsObserver.observe(stat);
    });
  }

  function animateNumber(element) {
    const finalValue = element.dataset.number;
    const cleanNumber = finalValue.replace(/[^\d]/g, '');
    
    if (!cleanNumber) return;
    
    const duration = 1800;
    const startTime = performance.now();
    const targetNumber = parseInt(cleanNumber);
    const suffix = finalValue.replace(cleanNumber, '');
    
    function updateNumber(currentTime) {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      const easeOutQuart = 1 - Math.pow(1 - progress, 4);
      const currentNumber = Math.floor(targetNumber * easeOutQuart);
      
      element.textContent = currentNumber + suffix;
      
      if (progress < 1) {
        requestAnimationFrame(updateNumber);
      } else {
        element.textContent = finalValue;
      }
    }
    
    requestAnimationFrame(updateNumber);
  }
</script>
